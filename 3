3a)
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define ALPHABET_SIZE 26
void encrypt(char plaintext[], char key[], char ciphertext[]) {
int i, j = 0;
int len_plaintext = strlen(plaintext);
int len_key = strlen(key);
for (i = 0; i < len_plaintext; i++) {
if (isalpha(plaintext[i])) {
char key_char = toupper(key[j % len_key]);
char plain_char = toupper(plaintext[i]);
ciphertext[i] = ((plain_char - 'A' + (key_char - 'A')) % ALPHABET_SIZE) + 'A';
j++;
} else {
ciphertext[i] = plaintext[i];
}
}
ciphertext[i] = '\0';
}
void decrypt(char ciphertext[], char key[], char plaintext[]) {
int i, j = 0;
int len_ciphertext = strlen(ciphertext);
int len_key = strlen(key);
for (i = 0; i < len_ciphertext; i++) {
if (isalpha(ciphertext[i])) {
char key_char = toupper(key[j % len_key]);
char cipher_char = toupper(ciphertext[i]);
plaintext[i] = ((cipher_char - key_char + ALPHABET_SIZE) % ALPHABET_SIZE) + 'A';
j++;
} else {
plaintext[i] = ciphertext[i];
}
}
plaintext[i] = '\0';
}
void print_vigenere_table() {
char alphabet[ALPHABET_SIZE] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
for (int i = 0; i < ALPHABET_SIZE; i++) {
for (int j = 0; j < ALPHABET_SIZE; j++) {
printf("%c ", alphabet[(i + j) % ALPHABET_SIZE]);
}
printf("\n");
}
}
int main() {
char plaintext[100], key[100], encryptedText[100], decryptedText[100];
printf("Enter the plaintext: ");
fgets(plaintext, sizeof(plaintext), stdin);
plaintext[strcspn(plaintext, "\n")] = '\0';
printf("Enter the key: ");
fgets(key, sizeof(key), stdin);
key[strcspn(key, "\n")] = '\0';
print_vigenere_table();
encrypt(plaintext, key, encryptedText);
printf("Encrypted Text: %s\n", encryptedText);
decrypt(encryptedText, key, decryptedText);
printf("Decrypted Text: %s\n", decryptedText);
return 0;
}

3b)
#include <stdio.h>
#include <string.h>

void remove_spaces(char *text, char *no_spaces) {
int j = 0;
for (int i = 0; text[i] != '\0'; i++) {
if (text[i] != ' ') {
no_spaces[j++] = text[i];
}
}
no_spaces[j] = '\0';
}

void rail_fence_encrypt(char text[], int rails, char encrypted[]) {
int len = strlen(text);
if (rails == 1) {
strcpy(encrypted, text);
return;
}

char rail_matrix[rails][len];
memset(rail_matrix, 0, sizeof(rail_matrix));

int row = 0, col = 0, direction = 1;

// Fill the rail matrix
for (int i = 0; i < len; i++) {
rail_matrix[row][col++] = text[i];

if (row == 0)

direction = 1;
else if (row == rails - 1)
direction = -1;

row += direction;
}

// Print the matrix to show how the characters are arranged during encryption
printf("Rail Matrix (During Encryption):\n");
for (int i = 0; i < rails; i++) {
for (int j = 0; j < len; j++) {
if (rail_matrix[i][j] != 0)
printf("%c", rail_matrix[i][j]);
else
printf(" ");
}
printf("\n");
}

// Extract the encrypted text from the matrix
int index = 0;
for (int i = 0; i < rails; i++) {
for (int j = 0; j < len; j++) {
if (rail_matrix[i][j] != 0) {
encrypted[index++] = rail_matrix[i][j];
}
}
}
encrypted[index] = '\0';
}

void rail_fence_decrypt(char text[], int rails, char decrypted[], const char *original_text) {
int len = strlen(text);
if (rails == 1) {
strcpy(decrypted, text);
return;
}

char rail_matrix[rails][len];
memset(rail_matrix, 0, sizeof(rail_matrix));

int row = 0, col = 0, direction = 1;

for (int i = 0; i < len; i++) {
rail_matrix[row][col++] = '*';

if (row == 0)
direction = 1;
else if (row == rails - 1)
direction = -1;

row += direction;
}

int index = 0;
for (int i = 0; i < rails; i++) {
for (int j = 0; j < len; j++) {
if (rail_matrix[i][j] == '*' && index < len) {
rail_matrix[i][j] = text[index++];
}
}
}

index = 0;
row = 0, col = 0, direction = 1;
for (int i = 0; i < len; i++) {
decrypted[index++] = rail_matrix[row][col++];

if (row == 0)
direction = 1;
else if (row == rails - 1)
direction = -1;

row += direction;

}
decrypted[index] = '\0';

int j = 0;
for (int i = 0; original_text[i] != '\0'; i++) {
if (original_text[i] == ' ') {
while (decrypted[j] != '\0' && decrypted[j] != ' ') {
j++;
}
memmove(decrypted + j + 1, decrypted + j, strlen(decrypted) - j + 1);
decrypted[j] = ' ';
}
}
}

int main() {
char text[100], encrypted[100], decrypted[100], no_spaces[100];
int rails;

printf("Enter the message to encrypt: ");
fgets(text, sizeof(text), stdin);
text[strcspn(text, "\n")] = '\0';

printf("Enter the number of rails: ");
scanf("%d", &rails);
getchar();

remove_spaces(text, no_spaces);

rail_fence_encrypt(no_spaces, rails, encrypted);
printf("Encrypted Message: %s\n", encrypted);

rail_fence_decrypt(encrypted, rails, decrypted, text);
printf("Decrypted Message: %s\n", decrypted);

return 0;
}
